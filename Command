if [[ -z ${nMeshingThreads} ]]; then nMeshingThreads=1; fi #job1MESH1
if [[ -z ${NCPUsMesh} || -z ${NCPUsSolver} || -z ${MPISerial} || -z ${MPICommand} ]]; then echo "Missing MPI flags; please update definitions"; exit -1; fi #job1MESH1
$MPICommand $MPISerial $MPIOptionsSerial bash -c 'mkdir -p ./log; touch ./case.icon' #job1MESH1
$MPICommand $MPISerial $MPIOptionsSerial bash -c 'for DIC in system/decomposeParDict system/controlDict system/blockMeshDict system/fvSolution system/fvSchemes constant/turbulenceProperties system/fvOptions system/changeDictionaryDict; do if [ -f ./${DIC}Initial ]; then cp ./${DIC}Initial ./${DIC}; fi; done' #job1MESH1
$MPICommand $MPISerial $MPIOptionsSerial blockMesh 2>&1 | tee ./log/000_blockMesh_$simID.log; RUN=${PIPESTATUS[0]}; if [ ${RUN} -gt 0 ]; then echo "BAD ending command: $0"; exit -1; fi #job1MESH1
$MPICommand $MPISerial $MPIOptionsSerial decomposePar -force 2>&1 | tee ./log/010_decomposePar_$simID.log; RUN=${PIPESTATUS[0]}; if [ ${RUN} -gt 0 ]; then echo "BAD ending command: $0"; exit -1; fi #job1MESH1
$MPICommand -np $NCPUsMesh $MPIOptionsMesh iconHexMesh -parallel -nthreads ${nMeshingThreads} 2>&1 | tee ./log/020_iconHexMesh_$simID.log; RUN=${PIPESTATUS[0]}; if [ ${RUN} -gt 0 ]; then echo "BAD ending command: $0"; exit -1; fi #job1MESH1
$MPICommand -np $NCPUsMesh $MPIOptionsMesh checkMesh -parallel -latestTime -nthreads ${nMeshingThreads} -writeVTK 2>&1 | tee ./log/023_checkMesh_$simID.log; RUN=${PIPESTATUS[0]}; if [ ${RUN} -gt 0 ]; then echo "BAD ending command: $0"; exit -1; fi #job1MESH1
$MPICommand -np $NCPUsMesh $MPIOptionsMesh foamToEnsight -parallel -latestTime -nthreads ${nMeshingThreads} 2>&1 | tee ./log/024_foamToEnsight_$simID.log; RUN=${PIPESTATUS[0]}; if [ ${RUN} -gt 0 ]; then echo "BAD ending command: $0"; exit -1; fi #job1MESH1
$MPICommand -np $NCPUsMesh $MPIOptionsMesh renumberMesh -overwrite -parallel -latestTime -nthreads ${nMeshingThreads} 2>&1 | tee ./log/025_renumberMesh_$simID.log; RUN=${PIPESTATUS[0]}; if [ ${RUN} -gt 0 ]; then echo "BAD ending command: $0"; exit -1; fi #job1MESH1

$MPICommand -np $NCPUsSolver $MPIOptions redistributeMeshPar -parallel -overwrite 2>&1 | tee ./log/026_redistributeMeshPar_$simID.log; RUN=${PIPESTATUS[0]}; if [ ${RUN} -gt 0 ]; then echo "BAD ending command: $0"; exit -1; fi #job2SOLV1
$MPICommand -np $NCPUsSolver $MPIOptions checkMesh -parallel -latestTime -writeVTK 2>&1 | tee ./log/027_checkMesh_$simID.log; RUN=${PIPESTATUS[0]}; if [ ${RUN} -gt 0 ]; then echo "BAD ending command: $0"; exit -1; fi #job2SOLV1
$MPICommand $MPISerial $MPIOptionsSerial bash -c 'for PROC in ./processor*; do CMD=$(echo ''if [ -d ${PROC}/0 ]\; then cp -r ./0.org/* ${PROC}/0\; mkdir -p ${PROC}/constant\; fi''); eval $CMD; done;' #job2SOLV1
$MPICommand -np $NCPUsSolver $MPIOptions changeDictionary -parallel -literalRE 2>&1 | tee ./log/028_changeDictionary_literalRE_$simID.log; RUN=${PIPESTATUS[0]}; if [ ${RUN} -gt 0 ]; then echo "BAD ending command: $0"; exit -1; fi #job2SOLV1
$MPICommand -np $NCPUsSolver $MPIOptions renumberMesh -overwrite -parallel -latestTime 2>&1 | tee ./log/032_renumberMesh_fields_$simID.log; RUN=${PIPESTATUS[0]}; if [ ${RUN} -gt 0 ]; then echo "BAD ending command: $0"; exit -1; fi #job2SOLV1
$MPICommand -np $NCPUsSolver $MPIOptions iconCellLimiter -parallel 2>&1 | tee ./log/033_iconCellLimiter_$simID.log; RUN=${PIPESTATUS[0]}; if [ ${RUN} -gt 0 ]; then echo "BAD ending command: $0"; exit -1; fi #job2SOLV1
#039_PotentialFoam_indicator #job2SOLV1
$MPICommand -np $NCPUsSolver $MPIOptions iconPotentialFoam -parallel 2>&1 | tee ./log/040_iconPotentialFoam_$simID.log; RUN=${PIPESTATUS[0]}; if [ ${RUN} -gt 0 ]; then echo "BAD ending command: $0"; exit -1; fi #job2SOLV1
$MPICommand $MPISerial $MPIOptionsSerial bash -c 'for PROC in ./processor*; do if [ -f $PROC/0/nuTilda_rans.gz ]; then cp $PROC/0/nuTilda_rans.gz $PROC/0/nuTilda.gz; fi; done' #job2SOLV1
$MPICommand $MPISerial $MPIOptionsSerial bash -c 'for DIC in system/controlDict system/fvSolution system/fvSchemes constant/turbulenceProperties system/fvOptions; do if [ -f ./${DIC}Steady ]; then cp ./${DIC}Steady ./${DIC}; fi; done' #job2SOLV1
$MPICommand -np $NCPUsSolver $MPIOptions iconSimplecFoam -parallel 2>&1 | tee ./log/045_iconSimplecFoam_$simID.log; RUN=${PIPESTATUS[0]}; if [ ${RUN} -gt 0 ]; then echo "BAD ending command: $0"; exit -1; fi #job2SOLV1
$MPICommand $MPISerial $MPIOptionsSerial bash -c 'for DIC in system/controlDict system/fvSolution system/fvSchemes constant/turbulenceProperties system/fvOptions; do if [ -f ./${DIC}Final ]; then cp ./${DIC}Final ./${DIC}; fi; done;' #job2SOLV1
$MPICommand $MPISerial $MPIOptionsSerial bash -c 'LastTiMe=$(find ./processor* -maxdepth 1 -mindepth 1 -type d | awk -F/ '\''{print 1*$NF}'\'' | grep -v ''0.org'' | sort -g | tail -1); LastTiMe0=0; for PROC in ./processor*; do if [ -d ${PROC}/${LastTiMe0} ]; then for VAR in $(find ${PROC}/${LastTiMe0} -maxdepth 1 -type f); do VARNAME=$(echo $VAR | awk -F/ '\''{print $NF}'\''); if [ ! -f ${PROC}/${LastTiMe}/${VARNAME} ]; then CMD=$(echo ''if [ -f ${VAR} ]\; then cp ${VAR} ${PROC}/${LastTiMe}\; fi''); eval $CMD; fi; done; fi; done' #job2SOLV1
$MPICommand $MPISerial $MPIOptionsSerial bash -c 'LastTiMe=$(find ./processor* -maxdepth 1 -mindepth 1 -type d | awk -F/ '\''{print 1*$NF}'\'' | grep -v ''0.org'' | sort -g | tail -1); if [ ${LastTiMe} != 0 ]; then for PROC in ./processor*; do CMD=$(echo ''if [ -d ${PROC}/0 ]\; then mv ${PROC}/0 ${PROC}/0.org\; fi''); eval $CMD; done; for PROC in ./processor*; do CMD=$(echo ''if [ -d ${PROC}/${LastTiMe} ]\; then mv ${PROC}/${LastTiMe} ${PROC}/0\; fi''); eval $CMD; done; for PROC in ./processor*; do CMD=$(echo ''if [ -d ${PROC}/0.org/polyMesh ]\; then cp -r ${PROC}/0.org/polyMesh ${PROC}/0/polyMesh\; fi''); eval $CMD; done; fi' #job2SOLV1
if [ -d ./surfaces ]; then for CASE in $(ls ./surfaces); do foamToEnsight -case ./surfaces/${CASE} 2>&1 | tee ./log/047_convert2_$CASE_$simID.log; RUN=${PIPESTATUS[0]}; if [ ${RUN} -gt 0 ]; then echo "BAD ending command: $0"; exit -1; fi; mv ./surfaces/${CASE}/EnSight ./surfaces/${CASE}/EnSightInit; done; fi #job2SOLV1
$MPICommand $MPISerial $MPIOptionsSerial bash -c 'for PROC in ./processor*; do if [ -f $PROC/0/nuTilda_des.gz ]; then cp $PROC/0/nuTilda_des.gz $PROC/0/nuTilda.gz; fi; done' #job2SOLV1
$MPICommand -np $NCPUsSolver $MPIOptions iconPisoFoam -parallel 2>&1 | tee ./log/050_iconPisoFoam_$simID.log; RUN=${PIPESTATUS[0]}; if [ ${RUN} -gt 0 ]; then echo "BAD ending command: $0"; exit -1; fi #job2SOLV1
$MPICommand $MPISerial $MPIOptionsSerial bash -c 'LastTiMe=$(find ./processor* -maxdepth 1 -mindepth 1 -type d | awk -F/ '\''{print 1*$NF}'\'' | grep -v ''0.org'' | sort -g | tail -1); LastTiMe0=0; for PROC in ./processor*; do if [ -d ${PROC}/${LastTiMe0} ]; then for VAR in $(find ${PROC}/${LastTiMe0} -maxdepth 1 -type f); do VARNAME=$(echo $VAR | awk -F/ '\''{print $NF}'\''); if [ ! -f ${PROC}/${LastTiMe}/${VARNAME} ]; then CMD=$(echo ''if [ -f ${VAR} ]\; then cp ${VAR} ${PROC}/${LastTiMe}\; fi''); eval $CMD; fi; done; fi; done' #job2SOLV1
$MPICommand -np $NCPUsSolver $MPIOptions sample -parallel -latestTime 2>&1 | tee ./log/060_sample_$simID.log; RUN=${PIPESTATUS[0]}; if [ ${RUN} -gt 0 ]; then echo "BAD ending command: $0"; exit -1; fi #job2SOLV1
if [ -d ./surfaces ]; then for CASE in $(ls ./surfaces); do foamToEnsight -case ./surfaces/${CASE} -noZero 2>&1 | tee ./log/062_convert2_$CASE_$simID.log; RUN=${PIPESTATUS[0]}; if [ ${RUN} -gt 0 ]; then echo "BAD ending command: $0"; exit -1; fi; done; fi #job2SOLV1
$MPICommand -np $NCPUsSolver $MPIOptions foamToEnsight -parallel -noZero 2>&1 | tee ./log/070_foamToEnsight_$simID.log; RUN=${PIPESTATUS[0]}; if [ ${RUN} -gt 0 ]; then echo "BAD ending command: $0"; exit -1; fi #job2SOLV1
